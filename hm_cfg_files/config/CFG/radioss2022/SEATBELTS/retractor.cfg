//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2023 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Retractor Setup File
// 

ATTRIBUTES {
    solverkeyword  = VALUE(STRING, "Solver Keyword");
  // Single values
    EL_ID          = VALUE(ELEMS, "Element ID initially connected to retractor");
    Node_ID        = VALUE(NODE, "Anchorage node ID");
    Elem_size      = VALUE(FLOAT, "Target element size for released elements");
    //
    Sens_ID1       = VALUE(SENSOR, "Sensor identifier for retractor locking");
    Pullout        = VALUE(FLOAT, "Authorized amount of seatbelt release before locking");
    Fct_ID1        = VALUE(FUNCT, "Function identifier defining loading force scale factor vs pullout when retractor is locked");
    Fct_ID2        = VALUE(FUNCT, "Function identifier defining unloading force scale factor vs pullout when retractor is locked");
    Yscale1        = VALUE(FLOAT, "Retractor force");
    Xscale1        = VALUE(FLOAT, "Abscissa scaling factor for function fct_ID1 and fct_ID2");
    //
    Sens_ID2       = VALUE(SENSOR, "Sensor identifier used for pretension activation");
    Tens_typ       = VALUE(INT, "Pretensioner type");
    Force          = VALUE(FLOAT, "Maximum retractor force for pretentioner locking");
    Fct_ID3        = VALUE(FUNCT, "Function identifier defining pretension as a function of time, force versus time, length versus time, or energy versus time");
    Yscale2        = VALUE(FLOAT, "Ordinate scaling factor for function fct_ID3");
    Xscale2        = VALUE(FLOAT, "Abscissa scaling factor for function fct_ID3");
    //
    TITLE          = VALUE(STRING, "Title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    solverkeyword  = -1;
}
DEFAULTS {
    Xscale1        = 1.0;
}

GUI(COMMON)
{
    ASSIGN(solverkeyword, "/RETRACTOR/SPRING");
// Solver attributes 
    mandatory:
//
    DATA(EL_ID);
    DATA(Node_ID);
        SCALAR(Elem_size) { DIMENSION="l"; }
//
 optional:
    DATA(Sens_ID1);
    SCALAR(Pullout) { DIMENSION="l"; }
        SCALAR(Xscale1) { DIMENSION="l"; }
        SCALAR(Yscale1) { DIMENSION="force"; }
    graphical FUNCTION(Fct_ID1) {
      X_TITLE = "Pullout"; 
      Y_TITLE = "Loading Force";
    //   X_DIMENSION = "DIMENSIONLESS";  
    //  Y_DIMENSION = "DIMENSIONLESS";
      X_SCALING(Xscale1); 
      Y_SCALING(Yscale1);
    }
    graphical FUNCTION(Fct_ID2) {
      X_TITLE = "Pullout"; 
      Y_TITLE = "Unloading Force";
    //  X_DIMENSION = "DIMENSIONLESS";  
    //   Y_DIMENSION = "DIMENSIONLESS";
      X_SCALING(Xscale1); 
      Y_SCALING(Yscale1);
    }
//
    DATA(Sens_ID2);
    RADIO(Tens_typ)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(0, "0:No pretention");
        ADD(1, "1:Pretension is defined by pull in length vs time function");
        ADD(2, "2:Pretension is max of force vs time function or retractor force");
        ADD(3, "3:Pretension is max of force vs time function or retractor force and Pull_Lock release");
        ADD(4, "4:Pretension is sum of force vs time function and retractor force");
        ADD(5, "5:Pretension is defined by energy vs time function");
    }
    SCALAR(Force) { DIMENSION="force"; }
    SCALAR(Xscale2) { DIMENSION="t"; }
    SCALAR(Yscale2) { if  (Tens_typ == 1) { DIMENSION="l"; } 
      else if (Tens_typ == 2 || Tens_typ == 3 || Tens_typ == 4) { DIMENSION="force"; }
      else if (Tens_typ == 5) { DIMENSION="energy"; }
      else { DIMENSION="DIMENSIONLESS"; }}
    //
    if  (Tens_typ != 0) {
        graphical FUNCTION(Fct_ID3) {
          X_TITLE = "Time"; 
          if (Tens_typ == 1) { Y_TITLE = "Length";}
          else if (Tens_typ == 2 || Tens_typ == 3 || Tens_typ == 4) { Y_TITLE = "Force";}
          else if (Tens_typ == 5) { Y_TITLE = "Energy";}
          X_SCALING(Xscale2); 
          Y_SCALING(Yscale2);
}
    }
}

FORMAT(radioss2022) {
  HEADER("/RETRACTOR/SPRING/%d",_ID_);
  CARD("%-100s", TITLE);
  
  COMMENT("#    El_ID   node_ID           Elem_size");
  CARD("%10d%10d%20lg",EL_ID,Node_ID,Elem_size);
  COMMENT("# sens_ID1           Pull_Lock   fct_ID1   fct_ID2             Yscale1             Xscale1");
  CARD("%10d%20lg%10d%10d%20lg%20lg",Sens_ID1,Pullout,Fct_ID1,Fct_ID2,Yscale1,Xscale1);
  COMMENT("# sens_ID2   Typ_pre                Fmax   fct_ID3             Yscale2             Xscale2");
  CARD("%10d%10d%20lg%10d%20lg%20lg",Sens_ID2,Tens_typ,Force,Fct_ID3,Yscale2,Xscale2);
}
