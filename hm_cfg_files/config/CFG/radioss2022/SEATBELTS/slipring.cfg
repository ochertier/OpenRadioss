//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2023 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Slipring Setup File
// 

ATTRIBUTES {
//Solver attributes
    EL_ID1                  = VALUE(ELEMS, "ID of first element in slipring");
    EL_ID2                  = VALUE(ELEMS, "ID of second element in slipring");
    Node_ID                 = VALUE(NODE, "ID of anchorage node");
    Node_ID2                = VALUE(NODE, "Optional ID of node for the orientation of the slipring");
    Sens_ID                 = VALUE(SENSOR, "Sensor identifier used for slipring locking");
    Flow_flag               = VALUE(INT, "Sliding direction control flag");
    A                       = VALUE(FLOAT, "Coulomb friction scale factor"); 
    Ed_factor               = VALUE(FLOAT, "Exponential decay factor for Coulomb friction");
    //
    Fct_ID1                 = VALUE(FUNCT, "Function identifier defining dynamic Coulomb friction coefficient as a function of time");
    Fct_ID2                 = VALUE(FUNCT, "Function identifier defining dynamic Coulomb friction coefficient as a function of normal force");
    Fricd                   = VALUE(FLOAT, "Dynamic Coulomb friction coefficient"); 
    Xscale1                 = VALUE(FLOAT, "Abcissa scaling factor for function fct_ID1");
    Yscale2                 = VALUE(FLOAT, "Ordinate scaling factor for function fct_ID2");
    Xscale2                 = VALUE(FLOAT, "Abcissa scaling factor for function fct_ID2");
    //
    Fct_ID3                 = VALUE(FUNCT, "Function identifier defining static Coulomb friction coefficient as a function of time");
    Fct_ID4                 = VALUE(FUNCT, "Function identifier defining static Coulomb friction coefficient as a function of normal force");
    Frics                   = VALUE(FLOAT, "Static Coulomb friction coefficient"); 
    Xscale3                 = VALUE(FLOAT, "Abcissa scaling factor for function fct_ID3");
    Yscale4                 = VALUE(FLOAT, "Ordinate scaling factor for function fct_ID4");
    Xscale4                 = VALUE(FLOAT, "Abcissa scaling factor for function fct_ID4");
//HM INTERNAL
    TITLE                   = VALUE(STRING, "Title");
    solverkeyword           = VALUE(STRING, "Solver Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    solverkeyword           = -1;
}
DEFAULTS {
    Flow_flag               = 0;
    Xscale1                 = 1.0;
    Xscale2                 = 1.0;
    Yscale2                 = 1.0;
    Xscale3                 = 1.0;
    Xscale4                 = 1.0;
    Yscale4                 = 1.0;
}

GUI(COMMON)
{
    ASSIGN(solverkeyword, "/SLIPRING/SPRING");
// Solver attributes 
    mandatory:
        DATA(EL_ID1) {
            DISPLAY_STATUS=ALWAYS_ON;
            /FILTER/COMBINE/OR/""/""/"element type spring";
            /FILTER/config/21/EQ;
            /FILTER/config/23/EQ;
            /FILTER/config/24/EQ;
        }
        DATA(EL_ID2) {
            DISPLAY_STATUS=ALWAYS_ON;
            /FILTER/COMBINE/OR/""/""/"element type spring";
            /FILTER/config/21/EQ;
            /FILTER/config/23/EQ;
            /FILTER/config/24/EQ;
        }
        DATA(Node_ID);
        DATA(Node_ID2);
        DATA(Sens_ID) { DISPLAY_STATUS=ALWAYS_ON; }
        RADIO(Flow_flag) {
            ADD(0, "0: (Default)Slip in both directions");
            ADD(1, "1: Slip from El_ID1 to El_ID2 only");
            ADD(2, "2: Slip from El_ID2 to El_ID1 only");
        }{ DISPLAY_STATUS=ALWAYS_ON; }
        SCALAR(A);
        SCALAR(Ed_factor) { DIMENSION="velocity_inverse"; }
    optional:
        DATA(Fct_ID1) {/FILTER/groupEnumField/1/EQ/""/"type FUNCT";}
        DATA(Fct_ID2) {/FILTER/groupEnumField/1/EQ/""/"type FUNCT";}
        SCALAR(Fricd);
        SCALAR(Xscale1) { DIMENSION="t"; }
        SCALAR(Yscale2);
        SCALAR(Xscale2) { DIMENSION="force"; }
        DATA(Fct_ID3) {/FILTER/groupEnumField/1/EQ/""/"type FUNCT";}
        DATA(Fct_ID4) {/FILTER/groupEnumField/1/EQ/""/"type FUNCT";}
        SCALAR(Frics);
        SCALAR(Xscale3) { DIMENSION="t"; } 
        SCALAR(Yscale4);
        SCALAR(Xscale4) { DIMENSION="force"; }  
}


FORMAT(radioss2022) {
  HEADER("/SLIPRING/SPRING/%d",_ID_);
    CARD("%-100s", TITLE);
   
    COMMENT("#   El_ID1    El_ID2  node_ID1  node_ID2   sens_ID   Fl_flag                   A           Ed_factor");
  CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",EL_ID1,EL_ID2,Node_ID,Node_ID2,Sens_ID,Flow_flag,A,Ed_factor);

    COMMENT("#  fct_ID1   fct_ID2              Fric_d             Xscale1             Yscale2             Xscale2");
  CARD("%10d%10d%20lg%20lg%20lg%20lg",Fct_ID1,Fct_ID2,Fricd,Xscale1,Yscale2,Xscale2);

    COMMENT("#  fct_ID3   fct_ID4              Fric_s             Xscale3             Yscale4             Xscale4");
  CARD("%10d%10d%20lg%20lg%20lg%20lg",Fct_ID3,Fct_ID4,Frics,Xscale3,Yscale4,Xscale4);
}
