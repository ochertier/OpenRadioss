//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property SPR_BDAMP Type27

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    MASS                                    = VALUE(FLOAT, "Mass");
    ISENSOR                                 = VALUE(SENSOR, "Sensor identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    ISFLAG                                  = VALUE(INT, "Sensor flag");
    Ileng                                   = VALUE(INT, "Input per unit length flag");
    Itens                                   = VALUE(INT, "Tensile behavior flag");
    Ifail                                   = VALUE(INT, "Failure model flag");
    STIFF0                                  = VALUE(FLOAT, "Linear loading and unloading stiffness");
    DAMP1                                   = VALUE(FLOAT, "Linear damping coefficient");
    BETA1                                   = VALUE(FLOAT, "Exponent for non-linear stiffness force");
    MIN_RUP1                                = VALUE(FLOAT, "Negative failure limit");
    MAX_RUP1                                = VALUE(FLOAT, "Positive failure limit");
    GAP                                     = VALUE(FLOAT, "Minimum gap before activation");
    ISRATE                                  = VALUE(INT, "Flag for spring force filtering");    
    Asrate                                  = VALUE(FLOAT, "Cutoff frequency for spring force filtering");

    FUN_B1                                  = VALUE(FUNCT, "Function identifier defining nonlinear stiffness force");
    FUN_C1                                  = VALUE(FUNCT, "Function identifier defining damping force");
    ASCALE1                                 = VALUE(FLOAT, "Elongation scale factor for the stiffness function f");
    FSCALE1                                 = VALUE(FLOAT, "Ordinate scale factor for the stiffness function f");
    ASCALE2                                 = VALUE(FLOAT, "Velocity scale factor for the damping function g");
    FSCALE2                                 = VALUE(FLOAT, "Ordinate scale factor for the stiffness function g");
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING,"Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,"Entity_Comments");
    CommentEnumField                        = VALUE(INT,"User Comments");
    Prop_Name_OR_Type                       = VALUE(INT,"");
    IO_FLAG                                 = VALUE(INT,"");
    TYPE_NO                                 = VALUE(STRING,"");
    TITLE                                   = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                        = 9000;
    NUM_COMMENTS                       = 5110;
    COMMENTS                           = 5109;
    CommentEnumField                   = 7951;
    MASS                               = 167;
    ISENSOR                            = 5157;
    ISFLAG                             = 5158;
    Ifail                              = 8032;
    Ileng                              = 999;
    Itens                              = 761;
    STIFF0                             = 831;
    DAMP1                              = 254;
    GAP                                = 5153;
    BETA1                              = 6151;
    ISRATE                             = 4231;
    Asrate                             = 4534;
    MIN_RUP1                           = 5164;
    MAX_RUP1                           = 5165;
    FUN_B1                             = 168;
    FUN_C1                             = 1189;
    ASCALE1                            = 9161;
    FSCALE1                            = 9162;
    ASCALE2                            = 9163; 
    FSCALE2                            = 9164;
    Prop_Name_OR_Type                  = 4537;
    TITLE                              = 2000;
    TYPE_NO                            = -1;
    IO_FLAG                            = -1;
}

CHECK(COMMON)
{
    MASS                               >  0.0;
}

DEFAULTS(COMMON)
{
    DAMP1                               = 0.0;
    BETA1                               = 1.0;
    MIN_RUP1                            = -1e20;
    MAX_RUP1                            = 1e20;
    GAP                                 = 0.0;
    Asrate                              = 100000;
    ASCALE1                             = 1.0;
    FSCALE1                             = 1.0;
    ASCALE2                             = 1.0; 
    FSCALE2                             = 1.0;
    Ifail                               = 1;
}

GUI(COMMON)
{
 optional:
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE27/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SPR_BDAMP/");
    }
 mandatory:
    SCALAR(MASS)        { if(Ileng==0) { DIMENSION="m";} else { DIMENSION="lineic_mass"; } }
    DATA(ISENSOR)       { SUBTYPES=(/SENSOR/SENSOR_DEFINE); }
    RADIO(ISFLAG)
    {
       ADD(0, "0:Spring element activated when sens_ID activates and cannot be deactivated");
       ADD(1, "1:Spring element deactivated when sens_ID activates and cannot be activated");
       ADD(2, "2:Spring element activated or deactivated state matches the sensor state and can switch back and forth");
    }
    RADIO(Ileng)
    {
       ADD(0, "0:Spring properties are input as explained in the definition table");
       ADD(1, "1:Some inputs are per unit length");
    }
    RADIO(Itens)
    {
       ADD(0, "0:The spring only works in compression. No stiffness or damping in tension");
       ADD(1, "1:The spring also works in tension with the defined stiffness and damping");
    }
    if(Ileng==0)
    {
        RADIO(Ifail)
        {
           ADD(1, "1:Displacement criterion");
           ADD(2, "2:Force criterion");
    }     
    }
    else
    {
        RADIO(Ifail)
        {
           ADD(1, "1:Strain criterion");
           ADD(2, "2:Force criterion");
        }
    }
    SCALAR(STIFF0)       { if(Ileng==0) { DIMENSION="translation_stiffness"; } else { DIMENSION="force"; } }
 optional:
    SCALAR(DAMP1)        { if(Ileng==0) { DIMENSION="massFlux"; } else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(BETA1)        { DIMENSION="DIMENSIONLESS"; }
    if (Ifail == 1) {
      SCALAR(MIN_RUP1)   { if(Ileng==0) { DIMENSION="l"; } else { DIMENSION="DIMENSIONLESS"; } }
      SCALAR(MAX_RUP1)   { if(Ileng==0) { DIMENSION="l"; } else { DIMENSION="DIMENSIONLESS"; } }
    } 
    else if (Ifail == 2) {
      SCALAR(MIN_RUP1)   { DIMENSION="force";} 
      SCALAR(MAX_RUP1)   { DIMENSION="force";}
    } 
    SCALAR(GAP)         { if(Ileng==0) { DIMENSION="l"; } else { DIMENSION="DIMENSIONLESS"; } }
    RADIO(ISRATE)
    {
       ADD(0, "0:No filtering");
       ADD(1, "1:Spring force is filtered using the cutoff frequency Fcut ");
    }
    SCALAR(Asrate)        { DIMENSION="f"; }
    DATA(FUN_B1);
    DATA(FUN_C1);
    SCALAR(ASCALE1)     { if(Ileng==0) { DIMENSION="l"; } else { DIMENSION="DIMENSIONLESS"; } }
    SCALAR(FSCALE1)     { DIMENSION="force"; }
    SCALAR(ASCALE2)     { if(Ileng==0) { DIMENSION="velocity"; } else { DIMENSION="f"; } }
    SCALAR(FSCALE2)     { DIMENSION="force"; }
    
}

// File format for Radioss 2022
FORMAT(radioss2022) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE27/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_BDAMP/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               Mass                                 sens_ID    Isflag     Ileng     Itens     Ifail");
    CARD("%20lg%30s%10d%10d%10d%10d%10d",MASS,_BLANK_,ISENSOR,ISFLAG,Ileng,Itens,Ifail);
    //
    COMMENT("#                  K                   C                   n           Delta_min           Delta_max");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF0,DAMP1,BETA1,MIN_RUP1,MAX_RUP1);
    //
    COMMENT("#                gap                                                     Fsmooth                Fcut");
    CARD("%20lg%50s%10d%20lg",GAP,_BLANK_,ISRATE,Asrate);
    //
    COMMENT("#  fct_ID1   fct_ID2             Ascale1             Fscale1             Ascale2             Fscale2");
    CARD("%10d%10d%20lg%20lg%20lg%20lg",FUN_B1,FUN_C1,ASCALE1,FSCALE1,ASCALE2,FSCALE2);
}
