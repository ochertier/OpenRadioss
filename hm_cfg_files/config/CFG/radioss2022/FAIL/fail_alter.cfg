//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2023 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Failure model, ALTER Setup File
// 

ATTRIBUTES(COMMON){ 

    _HMCOMMENTSFLAG         = VALUE(INT, "Write HM Comments");
    mat_id                  = VALUE(MAT,  "Material");

    Exp_n                   = VALUE(FLOAT,"Crack growth exponent for subcritical crack growth");
    V0                      = VALUE(FLOAT,"Crack growth velocity for subcritical crack growth at KIC ");
    Vc                      = VALUE(FLOAT,"Maximum crack propagation velocity glass ");
    EMA                     = VALUE(INT,"Stress filtering period in cycles");
    Irate                   = VALUE(INT,"Stress filtering method");
    Iside                   = VALUE(INT,"Strain rate dependency option");
    mode                    = VALUE(INT,"Flag to switch failure propagation models between neighbor elements");
    OUT_FLAG                = VALUE(INT,"Flag to activate exhaustive failure information in engine output file");
    
    Cr_foil                 = VALUE(FLOAT,"Crack depth at PVB surface ");
    Cr_air                  = VALUE(FLOAT,"Crack depth PVB surface");
    Cr_core                 = VALUE(FLOAT,"Crack depth in between bottom and surface integration points");
    Cr_edge                 = VALUE(FLOAT, "Crack depth at the edge elements of windshield");
    grsh4N                  = VALUE(SETS,"(Optional) Group identifier for 4 node shell elements") { SUBTYPES = (/SETS/GRSHEL) ; }
    grsh3N                  = VALUE(SETS,"(Optional) Group identifier for 3 node shell elements") { SUBTYPES = (/SETS/GRSH3N) ; }
    KIC                     = VALUE(FLOAT, "Fracture toughness");
    KTH                     = VALUE(FLOAT, "Fatigue threshold");
    Rlen                    = VALUE(FLOAT,"Reference length");
    Tdel                    = VALUE(FLOAT,"Relaxation time before removing elements");
    Kres1                   = VALUE(FLOAT,"Residual tensile stress scale factor in first crack direction");
    Kres2                   = VALUE(FLOAT,"Residual tensile stress scale factor in second crack direction");
    Eta1                    = VALUE(FLOAT,"Weibull distribution parameter for bottom surface");           
    Beta1                   = VALUE(FLOAT,"Weibull distribution parameter for bottom surface");           
    Tau1                    = VALUE(FLOAT,"Weibull distribution parameter for bottom surface");           
    Eta2                    = VALUE(FLOAT,"Weibull distribution parameter for top surface");           
    Beta2                   = VALUE(FLOAT,"Weibull distribution parameter for top surface");           
    Tau2                    = VALUE(FLOAT,"Weibull distribution parameter for top surface");           
    A_Ref                   = VALUE(FLOAT,"Reference element surface area");           
    Sig_0                   = VALUE(FLOAT,"Initial stress on glass surface");           
    Pscale                  = VALUE(FLOAT,"limit value of distribution function interval");           
    Pflag                   = VALUE(INT,"choice of definition interval of distribution function");               
            
    ID_CARD_EXIST           = VALUE(BOOL, "Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _HMCOMMENTSFLAG         =-1;
}

GUI(COMMON) 
{
    SCALAR (Exp_n)          {DIMENSION="DIMENSIONLESS"; }
  SCALAR (V0)             {DIMENSION="velocity"; }
  SCALAR (Vc)             {DIMENSION="velocity"; }
    SCALAR (EMA)            {DIMENSION="DIMENSIONLESS"; }
    RADIO(Irate)
    {
        ADD(0, "0: Exponential moving average using Ncycles");
        ADD(1, "1: Arithmetic average using last 50 cycles");
    }
    if(Irate == 0)
    {
        SCALAR (EMA)        {DIMENSION="DIMENSIONLESS"; }
    }
    RADIO(Iside)
    {
        ADD(0, "0: (Default) Strain rate dependency only for air (outwards oriented) side");
        ADD(1, "1: Strain rate dependency for both sides of the shell");
    }
    RADIO(mode)
    {
        ADD(0, "0 : no failure info propagation (default)");
        ADD(1, "1 : xfem failure propagation");
        ADD(2, "2 : isotropic frontwave propagation");
        ADD(3, "3 : directional propagation through element edges");
        ADD(4, "4 : directional propagation through edges and diagonals");
    }
  SCALAR (Cr_foil)        {DIMENSION="l"; }
  SCALAR (Cr_air)         {DIMENSION="l"; }
  SCALAR (Cr_core)        {DIMENSION="l"; }
  SCALAR (Cr_edge)        {DIMENSION="l"; }
    SCALAR (KIC)            {DIMENSION="fracture_toughness"; }     
    SCALAR (KTH)            {DIMENSION="fracture_toughness"; }
  SCALAR (Rlen)           {DIMENSION="l"; }
  SCALAR (Tdel)           {DIMENSION="t"; }
    RADIO(OUT_FLAG)
    {
        ADD(0, "0: No additional output (Default)");
        ADD(1, "1: Activate extended output");
    }
    SCALAR (Kres1)          {DIMENSION="DIMENSIONLESS"; }
    SCALAR (Kres2)          {DIMENSION="DIMENSIONLESS"; }
    SCALAR (Eta1)           {DIMENSION="pressure"          ; }
    SCALAR (Tau1)           {DIMENSION="pressure"          ; }
  SCALAR (A_Ref)          {DIMENSION="area"              ; }
  SCALAR (Eta2)           {DIMENSION="pressure"          ; }
  SCALAR (Tau2)           {DIMENSION="pressure"          ; }
  SCALAR (Sig_0)          {DIMENSION="pressure"          ; }
    RADIO(Pflag)
    {
        ADD(0, "0: Distribution function from is defined between (0, P_scale)");
        ADD(1, "1: Distribution function from is defined between (P_scale, 1)");
    }
/*  TOUGHNESS = mass * time^(-2) * length^(-3/2)*/

}


FORMAT(radioss2022) {
    HEADER("/FAIL/ALTER/%d",mat_id);
    
    if(Irate==0)
    {
        COMMENT("#              EXP_N                  V0                  VC   NCYCLES     IRATE     ISIDE      MODE");
        CARD("%20lg%20lg%20lg%10d%10d%10d%10d",Exp_n,V0,Vc,EMA,Irate,Iside,mode);
    }
    else
    {
        COMMENT("#              EXP_N                  V0                  VC               IRATE     ISIDE      MODE");
        CARD("%20lg%20lg%20lg          %10d%10d%10d",Exp_n,V0,Vc,Irate,Iside,mode);
    }

    COMMENT("#            CR_FOIL              CR_AIR             CR_CORE             CR_EDGE    GRSH4N    GRSH3N");
    CARD("%20lg%20lg%20lg%20lg%10d%10d",Cr_foil,Cr_air,Cr_core,Cr_edge,grsh4N,grsh3N);
  
    COMMENT("#                KIC                 KTH                RLEN                TDEL   Out_flg");
    CARD("%20lg%20lg%20lg%20lg%10d",KIC,KTH,Rlen,Tdel,OUT_FLAG);
      
    COMMENT("#              KRES1               KRES2");
    CARD("%20lg%20lg",Kres1,Kres2);

    COMMENT("#               Eta1               Beta1                Tau1            Area_ref");
    CARD("%20lg%20lg%20lg%20lg",Eta1,Beta1,Tau1,A_Ref);
     
    COMMENT("#               Eta2               Beta2                Tau2");
    CARD("%20lg%20lg%20lg",Eta2,Beta2,Tau2);
   
    COMMENT("#               Sig0             P_scale  P_switch");
    CARD("%20lg%20lg%10d",Sig_0,Pscale,Pflag);
    
    if (ID_CARD_EXIST==TRUE)
    {
     COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}


FORMAT(radioss2021) {
    HEADER("/FAIL/ALTER/%d",mat_id);
    
    if(Irate==0)
    {
        COMMENT("#              EXP_N                  V0                  VC   NCYCLES     IRATE     ISIDE      MODE");
        CARD("%20lg%20lg%20lg%10d%10d%10d%10d",Exp_n,V0,Vc,EMA,Irate,Iside,mode);
    }
    else
    {
        COMMENT("#              EXP_N                  V0                  VC               IRATE     ISIDE      MODE");
        CARD("%20lg%20lg%20lg          %10d%10d%10d",Exp_n,V0,Vc,Irate,Iside,mode);
    }

    COMMENT("#            CR_FOIL              CR_AIR             CR_CORE             CR_EDGE    GRSH4N    GRSH3N");
    CARD("%20lg%20lg%20lg%20lg%10d%10d",Cr_foil,Cr_air,Cr_core,Cr_edge,grsh4N,grsh3N);
    
    COMMENT("#                KIC                 KTH                RLEN                TDEL");
    CARD("%20lg%20lg%20lg%20lg",KIC,KTH,Rlen,Tdel);
    
    COMMENT("#              KRES1               KRES2");
    CARD("%20lg%20lg",Kres1,Kres2);
    
    if (ID_CARD_EXIST==TRUE)
    {
     COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}

FORMAT(radioss2019) {
    HEADER("/FAIL/ALTER/%d",mat_id);
    
    if(Irate==0)
    {
        COMMENT("#              EXP_N                  V0                  VC   NCYCLES     IRATE                MODE");
        CARD("%20lg%20lg%20lg%10d%10d          %10d",Exp_n,V0,Vc,EMA,Irate,mode);
    }
    else
    {
        COMMENT("#              EXP_N                  V0                  VC               IRATE                MODE");
        CARD("%20lg%20lg%20lg          %10d          %10d",Exp_n,V0,Vc,Irate,mode);
    }

    COMMENT("#            CR_FOIL              CR_AIR             CR_CORE             CR_EDGE    GRSH4N    GRSH3N");
    CARD("%20lg%20lg%20lg%20lg%10d%10d",Cr_foil,Cr_air,Cr_core,Cr_edge,grsh4N,grsh3N);
    
    COMMENT("#                KIC                 KTH                RLEN");
    CARD("%20lg%20lg%20lg",KIC,KTH,Rlen);
    
    if (ID_CARD_EXIST==TRUE)
    {
     COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}

